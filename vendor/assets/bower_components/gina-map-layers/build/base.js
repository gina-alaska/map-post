// Generated by CoffeeScript 1.7.1
(function() {
  this.Gina = (function() {
    function Gina() {}

    return Gina;

  })();

  this.Gina.Layers = (function() {
    function Layers() {}

    Layers.return_by_name = true;

    Layers.tile_layer = function(tilejson) {
      return console.log('This should be reimplemented by the appropriate adapter!');
    };

    Layers.define = function(name, tilejson) {
      return Gina.Definitions.define(name, tilejson);
    };

    Layers.find = function(partial_name, return_by_name) {
      if (return_by_name == null) {
        return_by_name = Layers.return_by_name;
      }
      if (return_by_name) {
        return Layers.find_with_name(partial_name);
      } else {
        return Layers.find_without_name(partial_name);
      }
    };

    Layers.find_without_name = function(partial_name) {
      var layer, layers, _i, _len, _ref;
      layers = [];
      _ref = Gina.Definitions.find(partial_name);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layers.push(Layers.tile_layer(layer));
      }
      return layers;
    };

    Layers.find_with_name = function(partial_name) {
      var layer, layers, _i, _len, _ref;
      layers = {};
      _ref = Gina.Definitions.find(partial_name);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        layers[layer.name] = Layers.tile_layer(layer);
      }
      return layers;
    };

    Layers.get = function(layer_name) {
      return Layers.tile_layer(Gina.Definitions.get(layer_name));
    };

    return Layers;

  })();

  this.Gina.Definitions = (function() {
    function Definitions() {}

    Definitions.defs = {};

    Definitions.get = function(layer_name) {
      if (layer_name.match(/\*/)) {
        return Definitions.find(layer_name);
      } else {
        return Definitions.defs[layer_name];
      }
    };

    Definitions.find = function(partial_name) {
      var layers, name, regexp, tilejson, _ref;
      layers = [];
      regexp = new RegExp(partial_name.replace(/\./g, '\\.').replace('*', '[^\\s]*'));
      _ref = Definitions.defs;
      for (name in _ref) {
        tilejson = _ref[name];
        if (name.match(regexp)) {
          layers.push(tilejson);
        }
      }
      return layers;
    };

    Definitions.define = function(name, tilejson) {
      return Definitions.defs[name] = tilejson;
    };

    return Definitions;

  })();

}).call(this);
